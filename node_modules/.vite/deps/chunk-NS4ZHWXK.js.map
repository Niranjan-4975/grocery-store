{
  "version": 3,
  "sources": ["../../vuetify/src/components/VBadge/VBadge.tsx"],
  "sourcesContent": ["// Styles\nimport './VBadge.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { IconValue } from '@/composables/icons'\nimport { useLocale } from '@/composables/locale'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, useTheme } from '@/composables/theme'\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\n\n// Utilities\nimport { genericComponent, pickWithRest, propsFactory, useRender } from '@/util'\n\nexport type VBadgeSlots = {\n  default: never\n  badge: never\n}\n\nexport const makeVBadgeProps = propsFactory({\n  bordered: Boolean,\n  color: String,\n  content: [Number, String],\n  dot: Boolean,\n  floating: Boolean,\n  icon: IconValue,\n  inline: Boolean,\n  label: {\n    type: String,\n    default: '$vuetify.badge',\n  },\n  max: [Number, String],\n  modelValue: {\n    type: Boolean,\n    default: true,\n  },\n  offsetX: [Number, String],\n  offsetY: [Number, String],\n  textColor: String,\n\n  ...makeComponentProps(),\n  ...makeLocationProps({ location: 'top end' } as const),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n  ...makeTransitionProps({ transition: 'scale-rotate-transition' }),\n  ...makeDimensionProps(),\n}, 'VBadge')\n\nexport const VBadge = genericComponent<VBadgeSlots>()({\n  name: 'VBadge',\n\n  inheritAttrs: false,\n\n  props: makeVBadgeProps(),\n\n  setup (props, ctx) {\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(() => props.color)\n    const { roundedClasses } = useRounded(props)\n    const { t } = useLocale()\n    const { textColorClasses, textColorStyles } = useTextColor(() => props.textColor)\n    const { themeClasses } = useTheme()\n\n    const { locationStyles } = useLocation(props, true, side => {\n      const base = props.floating\n        ? (props.dot ? 2 : 4)\n        : (props.dot ? 8 : 12)\n\n      return base + (\n        ['top', 'bottom'].includes(side) ? Number(props.offsetY ?? 0)\n        : ['left', 'right'].includes(side) ? Number(props.offsetX ?? 0)\n        : 0\n      )\n    })\n\n    const { dimensionStyles } = useDimension(props)\n\n    useRender(() => {\n      const value = Number(props.content)\n      const content = (!props.max || isNaN(value)) ? props.content\n        : value <= Number(props.max) ? value\n        : `${props.max}+`\n\n      const [badgeAttrs, attrs] = pickWithRest(ctx.attrs as Record<string, any>, [\n        'aria-atomic',\n        'aria-label',\n        'aria-live',\n        'role',\n        'title',\n      ])\n\n      return (\n        <props.tag\n          class={[\n            'v-badge',\n            {\n              'v-badge--bordered': props.bordered,\n              'v-badge--dot': props.dot,\n              'v-badge--floating': props.floating,\n              'v-badge--inline': props.inline,\n            },\n            props.class,\n          ]}\n          { ...attrs }\n          style={ props.style }\n        >\n          <div class=\"v-badge__wrapper\">\n            { ctx.slots.default?.() }\n\n            <MaybeTransition transition={ props.transition }>\n              <span\n                v-show={ props.modelValue }\n                class={[\n                  'v-badge__badge',\n                  themeClasses.value,\n                  backgroundColorClasses.value,\n                  roundedClasses.value,\n                  textColorClasses.value,\n                ]}\n                style={[\n                  backgroundColorStyles.value,\n                  textColorStyles.value,\n                  dimensionStyles.value,\n                  props.inline ? {} : locationStyles.value,\n                ]}\n                aria-atomic=\"true\"\n                aria-label={ t(props.label, value) }\n                aria-live=\"polite\"\n                role=\"status\"\n                { ...badgeAttrs }\n              >\n                {\n                  props.dot ? undefined\n                  : ctx.slots.badge ? ctx.slots.badge?.()\n                  : props.icon ? <VIcon icon={ props.icon } />\n                  : content\n                }\n              </span>\n            </MaybeTransition>\n          </div>\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VBadge = InstanceType<typeof VBadge>\n"],
  "mappings": "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",
  "names": ["makeVBadgeProps", "propsFactory", "bordered", "Boolean", "color", "String", "content", "Number", "dot", "floating", "icon", "IconValue", "inline", "label", "type", "default", "max", "modelValue", "offsetX", "offsetY", "textColor", "makeComponentProps", "makeLocationProps", "location", "makeRoundedProps", "makeTagProps", "makeThemeProps", "makeTransitionProps", "transition", "makeDimensionProps", "VBadge", "genericComponent", "name", "inheritAttrs", "props", "setup", "ctx", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "roundedClasses", "useRounded", "t", "useLocale", "textColorClasses", "textColorStyles", "useTextColor", "themeClasses", "useTheme", "locationStyles", "useLocation", "side", "base", "includes", "dimensionStyles", "useDimension", "useRender", "value", "isNaN", "badgeAttrs", "attrs", "pickWithRest", "_createVNode", "tag", "_mergeProps", "class", "style", "_createElementVNode", "slots", "MaybeTransition", "_withDirectives", "undefined", "badge", "VIcon", "_vShow"]
}
