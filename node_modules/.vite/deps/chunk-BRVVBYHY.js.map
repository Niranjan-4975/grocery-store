{
  "version": 3,
  "sources": ["../../vuetify/src/components/VOtpInput/VOtpInput.tsx"],
  "sourcesContent": ["// Styles\nimport './VOtpInput.sass'\n\n// Components\nimport { makeVFieldProps, VField } from '@/components/VField/VField'\nimport { VOverlay } from '@/components/VOverlay/VOverlay'\nimport { VProgressCircular } from '@/components/VProgressCircular/VProgressCircular'\n\n// Composables\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useToggleScope } from '@/composables/toggleScope'\n\n// Utilities\nimport { computed, effectScope, nextTick, ref, toRef, watch, watchEffect } from 'vue'\nimport { filterInputAttrs, focusChild, genericComponent, pick, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\n// Types\nexport type VOtpInputSlots = {\n  default: never\n  loader: never\n}\n\nexport const makeVOtpInputProps = propsFactory({\n  autofocus: Boolean,\n  divider: String,\n  focusAll: Boolean,\n  label: {\n    type: String,\n    default: '$vuetify.input.otp',\n  },\n  length: {\n    type: [Number, String],\n    default: 6,\n  },\n  modelValue: {\n    type: [Number, String],\n    default: undefined,\n  },\n  placeholder: String,\n  type: {\n    type: String as PropType<'text' | 'password' | 'number'>,\n    default: 'number',\n  },\n\n  ...makeDimensionProps(),\n  ...makeFocusProps(),\n  ...pick(makeVFieldProps({\n    variant: 'outlined' as const,\n  }), [\n    'baseColor',\n    'bgColor',\n    'class',\n    'color',\n    'disabled',\n    'error',\n    'loading',\n    'rounded',\n    'style',\n    'theme',\n    'variant',\n  ]),\n}, 'VOtpInput')\n\nexport const VOtpInput = genericComponent<VOtpInputSlots>()({\n  name: 'VOtpInput',\n\n  props: makeVOtpInputProps(),\n\n  emits: {\n    finish: (val: string) => true,\n    'update:focused': (val: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { dimensionStyles } = useDimension(props)\n    const { isFocused, focus, blur } = useFocus(props)\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      '',\n      val => val == null ? [] : String(val).split(''),\n      val => val.join('')\n    )\n    const { t } = useLocale()\n\n    const length = computed(() => Number(props.length))\n    const fields = computed(() => Array(length.value).fill(0))\n    const focusIndex = ref(-1)\n    const contentRef = ref<HTMLElement>()\n    const inputRef = ref<HTMLInputElement[]>([])\n    const current = computed(() => inputRef.value[focusIndex.value])\n    let _isComposing = false\n\n    useToggleScope(() => props.autofocus, () => {\n      const intersectScope = effectScope()\n      intersectScope.run(() => {\n        const { intersectionRef, isIntersecting } = useIntersectionObserver()\n        watchEffect(() => {\n          intersectionRef.value = inputRef.value[0]\n        })\n        watch(isIntersecting, v => {\n          if (!v) return\n          intersectionRef.value?.focus()\n          intersectScope.stop()\n        })\n      })\n    })\n\n    function onInput () {\n      // The maxlength attribute doesn't work for the number type input, so the text type is used.\n      // The following logic simulates the behavior of a number input.\n      if (isValidNumber(current.value.value)) {\n        current.value.value = ''\n        return\n      }\n\n      if (_isComposing) return\n\n      const array = model.value.slice()\n      const value = current.value.value\n\n      array[focusIndex.value] = value\n\n      let target: any = null\n\n      if (focusIndex.value > model.value.length) {\n        target = model.value.length + 1\n      } else if (focusIndex.value + 1 !== length.value) {\n        target = 'next'\n      }\n\n      model.value = array\n\n      if (target) focusChild(contentRef.value!, target)\n    }\n\n    function onCompositionend () {\n      _isComposing = false\n      onInput()\n    }\n\n    function onKeydown (e: KeyboardEvent) {\n      const array = model.value.slice()\n      const index = focusIndex.value\n      let target: 'next' | 'prev' | 'first' | 'last' | number | null = null\n\n      if (![\n        'ArrowLeft',\n        'ArrowRight',\n        'Backspace',\n        'Delete',\n      ].includes(e.key)) return\n\n      e.preventDefault()\n\n      if (e.key === 'ArrowLeft') {\n        target = 'prev'\n      } else if (e.key === 'ArrowRight') {\n        target = 'next'\n      } else if (['Backspace', 'Delete'].includes(e.key)) {\n        array[focusIndex.value] = ''\n\n        model.value = array\n\n        if (focusIndex.value > 0 && e.key === 'Backspace') {\n          target = 'prev'\n        } else {\n          requestAnimationFrame(() => {\n            inputRef.value[index]?.select()\n          })\n        }\n      }\n\n      requestAnimationFrame(() => {\n        if (target != null) {\n          focusChild(contentRef.value!, target)\n        }\n      })\n    }\n\n    function onPaste (index: number, e: ClipboardEvent) {\n      e.preventDefault()\n      e.stopPropagation()\n\n      const clipboardText = e?.clipboardData?.getData('Text').trim().slice(0, length.value) ?? ''\n      const finalIndex = clipboardText.length - 1 === -1 ? index : clipboardText.length - 1\n\n      if (isValidNumber(clipboardText)) return\n\n      model.value = clipboardText.split('')\n\n      focusIndex.value = finalIndex\n    }\n\n    function reset () {\n      model.value = []\n    }\n\n    function onFocus (e: FocusEvent, index: number) {\n      focus()\n\n      focusIndex.value = index\n    }\n\n    function onBlur () {\n      blur()\n\n      focusIndex.value = -1\n    }\n\n    function isValidNumber (value: string) {\n      return props.type === 'number' && /[^0-9]/g.test(value)\n    }\n\n    provideDefaults({\n      VField: {\n        color: toRef(() => props.color),\n        bgColor: toRef(() => props.color),\n        baseColor: toRef(() => props.baseColor),\n        disabled: toRef(() => props.disabled),\n        error: toRef(() => props.error),\n        variant: toRef(() => props.variant),\n      },\n    }, { scoped: true })\n\n    watch(model, val => {\n      if (val.length === length.value) {\n        emit('finish', val.join(''))\n      }\n    }, { deep: true })\n\n    watch(focusIndex, val => {\n      if (val < 0) return\n\n      nextTick(() => {\n        inputRef.value[val]?.select()\n      })\n    })\n\n    useRender(() => {\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n\n      return (\n        <div\n          class={[\n            'v-otp-input',\n            {\n              'v-otp-input--divided': !!props.divider,\n            },\n            props.class,\n          ]}\n          style={[\n            props.style,\n          ]}\n          { ...rootAttrs }\n        >\n          <div\n            ref={ contentRef }\n            class=\"v-otp-input__content\"\n            style={[\n              dimensionStyles.value,\n            ]}\n          >\n            { fields.value.map((_, i) => (\n              <>\n                { props.divider && i !== 0 && (\n                  <span class=\"v-otp-input__divider\">{ props.divider }</span>\n                )}\n\n                <VField\n                  focused={ (isFocused.value && props.focusAll) || focusIndex.value === i }\n                  key={ i }\n                >\n                  {{\n                    ...slots,\n                    loader: undefined,\n                    default: () => {\n                      return (\n                        <input\n                          ref={ val => inputRef.value[i] = val as HTMLInputElement }\n                          aria-label={ t(props.label, i + 1) }\n                          autofocus={ i === 0 && props.autofocus }\n                          autocomplete=\"one-time-code\"\n                          class={[\n                            'v-otp-input__field',\n                          ]}\n                          disabled={ props.disabled }\n                          inputmode={ props.type === 'number' ? 'numeric' : 'text' }\n                          min={ props.type === 'number' ? 0 : undefined }\n                          maxlength={ i === 0 ? length.value : '1' }\n                          placeholder={ props.placeholder }\n                          type={ props.type === 'number' ? 'text' : props.type }\n                          value={ model.value[i] }\n                          onInput={ onInput }\n                          onFocus={ e => onFocus(e, i) }\n                          onBlur={ onBlur }\n                          onKeydown={ onKeydown }\n                          onCompositionstart={ () => _isComposing = true }\n                          onCompositionend={ onCompositionend }\n                          onPaste={ event => onPaste(i, event) }\n                        />\n                      )\n                    },\n                  }}\n                </VField>\n              </>\n            ))}\n\n            <input\n              class=\"v-otp-input-input\"\n              type=\"hidden\"\n              { ...inputAttrs }\n              value={ model.value.join('') }\n            />\n\n            <VOverlay\n              contained\n              contentClass=\"v-otp-input__loader\"\n              modelValue={ !!props.loading }\n              persistent\n            >\n              { slots.loader?.() ?? (\n                <VProgressCircular\n                  color={ typeof props.loading === 'boolean' ? undefined : props.loading }\n                  indeterminate\n                  size=\"24\"\n                  width=\"2\"\n                />\n              )}\n            </VOverlay>\n\n            { slots.default?.() }\n          </div>\n        </div>\n      )\n    })\n\n    return {\n      blur: () => {\n        inputRef.value?.some(input => input.blur())\n      },\n      focus: () => {\n        inputRef.value?.[0].focus()\n      },\n      reset,\n      isFocused,\n    }\n  },\n})\n\nexport type VOtpInput = InstanceType<typeof VOtpInput>\n"],
  "mappings": "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",
  "names": ["makeVOtpInputProps", "propsFactory", "autofocus", "Boolean", "divider", "String", "focusAll", "label", "type", "default", "length", "Number", "modelValue", "undefined", "placeholder", "makeDimensionProps", "makeFocusProps", "pick", "makeVFieldProps", "variant", "VOtpInput", "genericComponent", "name", "props", "emits", "finish", "val", "setup", "_ref", "attrs", "emit", "slots", "dimensionStyles", "useDimension", "isFocused", "focus", "blur", "useFocus", "model", "useProxiedModel", "split", "join", "t", "useLocale", "computed", "fields", "Array", "value", "fill", "focusIndex", "ref", "contentRef", "inputRef", "current", "_isComposing", "useToggleScope", "intersectScope", "effectScope", "run", "intersectionRef", "isIntersecting", "useIntersectionObserver", "watchEffect", "watch", "v", "stop", "onInput", "isValidNumber", "array", "slice", "target", "focusChild", "onCompositionend", "onKeydown", "e", "index", "includes", "key", "preventDefault", "requestAnimationFrame", "select", "onPaste", "stopPropagation", "clipboardText", "clipboardData", "getData", "trim", "finalIndex", "reset", "onFocus", "onBlur", "test", "provideDefaults", "VField", "color", "toRef", "bgColor", "baseColor", "disabled", "error", "scoped", "deep", "nextTick", "useRender", "rootAttrs", "inputAttrs", "filterInputAttrs", "_createElementVNode", "_mergeProps", "class", "style", "_normalizeStyle", "map", "_", "i", "_Fragment", "_createVNode", "loader", "_normalizeClass", "onCompositionstart", "event", "VOverlay", "loading", "VProgressCircular", "some", "input"]
}
